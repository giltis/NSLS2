Shamelessly copied from scikit-image. Thanks for the great guide scikit-devs!

Development process
-------------------

Here's the long and short of it:

1. If you are a first-time contributor:

   * Go to `https://github.com/Nikea/scikit-xray
     <http://github.com/Nikea/scikit-xray>`_ and click the
     "fork" button to create your own copy of the project.

   * Clone the project to your local computer::

      git clone git@github.com:your-username/scikit-xray.git

   * Add the upstream repository::

      git remote add upstream git@github.com:Nikea/scikit-xray.git

   * Now, you have remote repositories named:

      - ``upstream``, which refers to the ``scikit-xray`` repository
      - ``origin``, which refers to your personal fork

2. Develop your contribution:

   * Pull the latest changes from upstream::

      git checkout master
      git pull upstream master

   * Create a branch for the feature you want to work on. Since the
     branch name will appear in the merge message, use a sensible name
     such as 'transform-speedups'::

      git checkout -b transform-speedups

   * Commit locally as you progress (``git add`` and ``git commit``)

3. To submit your contribution:

   * Push your changes back to your fork on GitHub::

      git push origin transform-speedups

   * Go to GitHub. The new branch will show up with a green Pull Request
     button - click it.

For a more detailed discussion, See `scikit-xray dev guide 
<https://github.com/Nikea/scikit-xray/tree/master/doc/resource/dev_guide>`_.
Also see these scikit-image :doc:`detailed documents
<gitwash/index>` on how to use Git with ``scikit-image``
(`<http://scikit-image.org/docs/dev/gitwash/index.html>`_) and appropriately
translate scikit-image/scikit-image to Nikea/scikit-xray. 

4. Review process:

    * Reviewers (the other developers and interested community members) will
      write inline and/or general comments on your Pull Request (PR) to help
      you improve its implementation, documentation and style.  Every single
      developer working on the project has their code reviewed, and we've come
      to see it as friendly conversation from which we all learn and the
      overall code quality benefits.  Therefore, please don't let the review
      discourage you from contributing: its only aim is to improve the quality
      of project, not to criticize (we are, after all, very grateful for the
      time you're donating!).

    * To update your pull request, make your changes on your local repository
      and commit. As soon as those changes are pushed up (to the same branch as
      before) the pull request will update automatically.

    * `Travis-CI <http://travis-ci.org/>`__, a continuous integration service,
      is triggered after each Pull Request update to build the code, run unit
      tests, measure code coverage and check coding style (PEP8) of your
      branch. The Travis tests must pass before your PR can be merged. If
      Travis fails, you can find out why by clicking on the "failed" icon (red
      cross) and inspecting the build and test log.

5. Document changes

    Before merging your commits, you must add a description of your changes
    to the release notes of the upcoming version in
    ``doc/release/release_dev.txt``.

.. note::

   To reviewers: if it is not obvious, add a short explanation of what a branch
   did to the merge message and, if closing a bug, also add "Closes #123"
   where 123 is the issue number.


Divergence between ``upstream master`` and your feature branch
--------------------------------------------------------------

Do *not* ever merge the main branch into yours. If GitHub indicates that the
branch of your Pull Request can no longer be merged automatically, rebase
onto master::

   git checkout master
   git pull upstream master
   git checkout transform-speedups
   git rebase master

If any conflicts occur, fix the according files and continue::

   git add conflict-file1 conflict-file2
   git rebase --continue

However, you should only rebase your own branches and must generally not
rebase any branch which you collaborate on with someone else.

Finally, you must push your rebased branch::

   git push --force origin transform-speedups

(If you are curious, here's a further discussion on the
`dangers of rebasing <http://tinyurl.com/lll385>`__.
Also see this `LWN article <http://tinyurl.com/nqcbkj>`__.)

Guidelines
----------

* All code should have tests (see `test coverage`_ below for more details).
* All code should be documented, to the same
  `standard <http://projects.scipy.org/numpy/wiki/CodingStyleGuidelines>`_
  as NumPy and SciPy.
* For new functionality, always add an example to the
  gallery.
* **Never merge your own pull request.**
* Examples in the gallery should have a maximum figure width of 8 inches.

Stylistic Guidelines
--------------------

* Set up your editor to remove trailing whitespace.  Follow `PEP08
  <www.python.org/dev/peps/pep-0008/>`__.  Check code with pyflakes / flake8.

* Use numpy data types instead of strings (``np.uint8`` instead of
  ``"uint8"``).

* Use the following import conventions::

   import numpy as np
   import matplotlib.pyplot as plt

   cimport numpy as cnp # in Cython code

* When documenting array parameters, use ``image : (M, N) ndarray``
  and then refer to ``M`` and ``N`` in the docstring, if necessary.

* Functions should support all input image dtypes.  Use utility functions such
  as ``img_as_float`` to help convert to an appropriate type.  The output
  format can be whatever is most efficient.  This allows us to string together
  several functions into a pipeline, e.g.::

   hough(canny(my_image))

* Use ``Py_ssize_t`` as data type for all indexing, shape and size variables
  in C/C++ and Cython code.

Test coverage
-------------

Tests for a module should ideally cover all code in that module,
i.e., statement coverage should be at 100%.

To measure the test coverage, install
`coverage.py <http://nedbatchelder.com/code/coverage/>`__
(using ``easy_install coverage``) and then run::

  $ python run_tests.py

This will print a report with one line for each file in `skxray`,
detailing the test coverage::

  Name                                 Stmts   Miss  Cover   Missing
  ------------------------------------------------------------------
  skxray.calibration                      48      0   100%
  skxray.constants                       153      2    99%   783, 836
  skxray.core                            306    113    63%   63-64, 101-105,
        108, 113-146, 149-162, 167-172, 176, 179, 186-191, 237-240, 245-262,
        266-270, 273-277, 280, 283, 289-294, 298-300, 304-334, 476, 658, 804,
        894-903, 911, 915, 942, 960,
  963, 1158
  skxray.feature                          58      4    93%   133-136, 177, 216
  skxray.fitting                          15      1    93%   77
  skxray.fitting.api                      11      0   100%
  skxray.fitting.background               51      4    92%   127, 133, 141, 163
  skxray.fitting.base                      4      0   100%
  skxray.fitting.base.parameter_data       9      0   100%
  skxray.fitting.lineshapes               56      1    98%   137
  skxray.fitting.models                   40      2    95%   126, 156
  skxray.image                            14      0   100%
  skxray.io                                2      0   100%
  skxray.io.net_cdf_io                    15     10    33%   81-105
  skxray.recip                            35      4    89%   57-58, 142, 147
  skxray.spectroscopy                     69      2    97%   133, 267
  ------------------------------------------------------------------
  TOTAL                                  886    143    84%
  ----------------------------------------------------------------------
  Ran 102 tests in 2.221s

   (clearly we need to improve our own tests!)


Activate Travis-CI for your fork (optional)
-------------------------------------------

Travis-CI checks all unittests in the project to prevent breakage.

Before sending a pull request, you may want to check that Travis-CI
successfully passes all tests. To do so,

   * Go to `Travis-CI <http://travis-ci.org/>`__ and follow the Sign In link at the top

   * Go to your `profile page <https://travis-ci.org/profile>`__ and switch on your
   scikit-xray fork

It corresponds to steps one and two in
`Travis-CI documentation <http://about.travis-ci.org/docs/user/getting-started/>`__
(Step three is already done in scikit-xray).

Thus, as soon as you push your code to your fork, it will trigger Travis-CI,
and you will receive an email notification when the process is done.

Every time Travis is triggered, it also calls on `Coveralls
<http://coveralls.io>`_ to inspect the current test overage.


Bugs
----

Please `report bugs on GitHub <https://github.com/Nikea/scikit-xray/issues>`_.
